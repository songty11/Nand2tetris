// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=Ainstruction);

    Not(in=Ainstruction, out=Cinstruction);
    
    And(a=Cinstruction, b=instruction[5], out=ALUtoA);  //for A register

    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin);   //MUX instruction and ALU output  
    
    Or(a=Ainstruction, b=ALUtoA, out=loadA);    //if A instruction or (C instruction & d1) to A-register, loadA

    ARegister(in=Aregin, load=loadA, out=Aout); //output A register
    
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);   // select A or M based on inst[12](a)

    And(a=Cinstruction, b=instruction[4], out=loadD); //for register D

    DRegister(in=ALUout, load=loadD, out=Dout);    // load the D register from ALU
    
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZRout, ng=NGout); // ALU Function
        
    // writiing memory
    Or16(a=false, b=Aout, out[0..14] = addressM);       //0-14 output of A register is address
    Or16(a=false, b=ALUout, out=outM);                  //ALUout is outM
    And(a=Cinstruction, b=instruction[3], out=writeM);   //writeM is c inst and d3
    
    // for PC inst[15]*inst[2]*ng + inst[15]*inst[1]*zr + inst[15]*inst[0]*notng*notzr

    And(a=ZRout, b=instruction[1], out=JEQ);    // For JEQ
    And(a=NGout, b=instruction[2], out=JLT);    // For JLT

    Or(a=ZRout, b=NGout, out=zeroOrNeg);

    Not(in=zeroOrNeg, out = positive);            // > 0
    And(a=positive, b=instruction[0], out=JGT); // >0 JGT
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JLE, b=JGT, out=jumpA);               //JLE for <=0  JGT for > 0 if one exsist, we jump
    And(a=Cinstruction, b=jumpA, out=PCload); // jump if C instruction
    Not(in=PCload, out=PCinc);                  // inc if not load
    PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}