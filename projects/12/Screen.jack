class Screen {
    
    static Array screen;
    static boolean color;
    static boolean white;
    static boolean black;
    static int whitepixel;
    static int blackpixel;

    static int twoPower;

    /** Initializes the Screen. */
    function void init() 
    {
        let screen = 16384;
        let white = false;
        let black = true;
        let color = black;
        let whitepixel = 0;
        let blackpixel = 1;

        let twoPower = Array.new(16);

        let twoPower[0] = 1;
        let twoPower[1] = 2;
        let twoPower[2] = 4;
        let twoPower[3] = 8;
        let twoPower[4] = 16;
        let twoPower[5] = 32;
        let twoPower[6] = 64;
        let twoPower[7] = 128;
        let twoPower[8] = 256;
        let twoPower[9] = 512;
        let twoPower[10] = 1024;
        let twoPower[11] = 2048;
        let twoPower[12] = 4096;
        let twoPower[13] = 8192;
        let twoPower[14] = 16384;
        let twoPower[15] = 16384+16384;

        return ;
    }

    /** Erases the whole screen. */
    function void clearScreen()
     {
        var int i;
        let i = 0;
        while(i < 8192) 
        {
            let screen[i] = white;
        }
        return ;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b)
    {
        let color = b;
        return ;
    }

    function int power_of_two(int x)
    {
        return twoPower[x];
    }
    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y)
    {
        var int address;
        var int mask;

        let address = (y * 32) + (x / 16);

        let mask = Screen.power_of_two(x & 15) ;

        if(color) 
        {
            let screen[address] = screen[address] | mask;
        }
        else 
        {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    function void drawshort(int x1, int x2, int y)
    {
        while(~(x1 > x2)) 
        {
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }
        return ;
    }
    function void drawHorizon( int x1, int x2, int y ) {
        var int start, end;
        var int x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;

        let start = (y*32) + (x1/16);
        let end = (y*32) + (x2/16) + (x2mod16=0);

        if( start = end ) {   
            do Screen.drawshort( x1, x2, y );
        }
        else { 
            if( ~(x1mod16 = 0) ) {      
                let start = start + 1;
                do Screen.drawshort(x1, x1+16-x1mod16,y);
            }
            if( ~(x2mod16 = 0) ) {      
                let end = end - 1;
                do Screen.drawshort(x2-x2mod16, x2, y);
            }
            while( ~(start > end) ) { 
                let screen[start] = color;
                let start = start + 1;
            }
        }
        return;
    }
    function void drawVertical(int x,int y1,int y2 )
    {
        var int temp;
        if( y1 > y2 ) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while(~(y1 > y2)) 
        {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }

        return;
    }
    function void drawDiago(int x1, int y1, int x2, int y2, int dx, int dy) 
    {
        var int incy,a,b,minus;
        let a = 0;
        let b = 0;
        let minus = 0;
        

        if( dy < 0 ) 
        {
            let incy = -1;
        }
        else 
        {
            let incy = 1;
        }

        while(~(a > dx) & (((incy = 1) & ~(b > dy)) | ((incy = -1) & ~(b < dy)))) 
        {
            do Screen.drawPixel(x1+a, y1+b);
            if( minus < 0 ) 
            {
                let a = a + 1;
                let minus = minus + (dy * incy);
            }
            else 
            {
                let b = b + incy;
                let minus = minus - dx;
            }
        }
        return;
    }
    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        var int dx, dy;
        var int temp;

        if( x1 > x2 ) 
        {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        
        
        
        if( dx = 0 ) 
        {
            do Screen.drawVertical( x1, y1, y2 );
        }
        else 
        { 
            if( dy = 0 )
            {
                do Screen.drawHorizon( x1, x2, y1 );
            }
            else 
            {
                do Screen.drawDiago( x1, y1, x2, y2, dx, dy );
            }
        }
        
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        var int y;  
        let y = y1;

        while(~(y > y2)) {
            do Screen.drawHorizon(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) 
    {

        var int dx, dy;
        var int r2;
        
        let dy = -r;
        let r2 = r * r;
        while(~(dy > r)) 
        {
            let dx = Math.sqrt(r2 - (dy * dy));
            do Screen.drawHorizon(cx - dx, cx + dx, cy + dy );
            let dy = dy + 1;
        }
        return;
    }
}