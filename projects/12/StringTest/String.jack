// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    
    field Array buffer;
    field int size;
    field int length;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) 
    {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let size = maxLength;
        let length = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() 
    {
        do Array.dispose(buffer);
        return;
    }

    /** Returns the current length of this String. */
    method int length() 
    {
        return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) 
    {
        return buffer[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) 
    {
        let buffer[j] = c;
        return ;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) 
    {
        if( length < size ) 
        {
            let buffer[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() 
    {
        if(length>0)
        {
            let length = length-1;
        }
        return ;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() 
    {
        var int val;
        var int i;
        var boolean neg;
        
        let val = 0;
        
        if( (length > 0) & (buffer[0] = 45))
        {    

            let neg = true;
            let i = 1;
        }
        else 
        {
            let neg = false;
            let i = 0;
        }
        
        while((i < length) & ~(buffer[i] < 48) & ~(buffer[i] > 57)) 
        {
            let val = (val * 10) - 48 + buffer[i];
            let i = i + 1;
        }
        
        if(neg) 
        {
            return -val;
        }
        else 
        {
            return val;
        }
    }

    method void helper(int num)
    {
        var int q;
        var int mod;
        var int c;
        
        let q = num / 10;
        let mod = num - (q * 10);
        let c = mod + 48;
        
        if( num < 10 ) {
            do appendChar(c);
        }
        else {
            do helper(q);
            do appendChar(c);
        }
        return;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) 
    {
        let length = 0;    // Clear string
        
        if( number < 0 ) {
            let number = -number;
            do appendChar(45);      // leading '-'
        }
        
        do helper(number);
        return;
    }

    /** Returns the new line character. */
    function char newLine() 
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() 
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
        return 34;
    }
}
